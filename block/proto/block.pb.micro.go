// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: block.proto

package block

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Block service

func NewBlockEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Block service

type BlockService interface {
	ListVolumes(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*ListVolumesResponse, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...client.CallOption) (*CreateVolumeResponse, error)
}

type blockService struct {
	c    client.Client
	name string
}

func NewBlockService(name string, c client.Client) BlockService {
	return &blockService{
		c:    c,
		name: name,
	}
}

func (c *blockService) ListVolumes(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*ListVolumesResponse, error) {
	req := c.c.NewRequest(c.name, "Block.ListVolumes", in)
	out := new(ListVolumesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockService) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...client.CallOption) (*CreateVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.CreateVolume", in)
	out := new(CreateVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Block service

type BlockHandler interface {
	ListVolumes(context.Context, *VolumeRequest, *ListVolumesResponse) error
	CreateVolume(context.Context, *CreateVolumeRequest, *CreateVolumeResponse) error
}

func RegisterBlockHandler(s server.Server, hdlr BlockHandler, opts ...server.HandlerOption) error {
	type block interface {
		ListVolumes(ctx context.Context, in *VolumeRequest, out *ListVolumesResponse) error
		CreateVolume(ctx context.Context, in *CreateVolumeRequest, out *CreateVolumeResponse) error
	}
	type Block struct {
		block
	}
	h := &blockHandler{hdlr}
	return s.Handle(s.NewHandler(&Block{h}, opts...))
}

type blockHandler struct {
	BlockHandler
}

func (h *blockHandler) ListVolumes(ctx context.Context, in *VolumeRequest, out *ListVolumesResponse) error {
	return h.BlockHandler.ListVolumes(ctx, in, out)
}

func (h *blockHandler) CreateVolume(ctx context.Context, in *CreateVolumeRequest, out *CreateVolumeResponse) error {
	return h.BlockHandler.CreateVolume(ctx, in, out)
}
