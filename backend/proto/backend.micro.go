// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: backend.proto

/*
Package backend is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	GetBackendRequest
	GetBackendResponse
*/
package backend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Backend service

type BackendService interface {
	GetBackend(ctx context.Context, in *GetBackendRequest, opts ...client.CallOption) (*GetBackendResponse, error)
}

type backendService struct {
	c    client.Client
	name string
}

func NewBackendService(name string, c client.Client) BackendService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "backend"
	}
	return &backendService{
		c:    c,
		name: name,
	}
}

func (c *backendService) GetBackend(ctx context.Context, in *GetBackendRequest, opts ...client.CallOption) (*GetBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.GetBackend", in)
	out := new(GetBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendHandler interface {
	GetBackend(context.Context, *GetBackendRequest, *GetBackendResponse) error
}

func RegisterBackendHandler(s server.Server, hdlr BackendHandler, opts ...server.HandlerOption) error {
	type backend interface {
		GetBackend(ctx context.Context, in *GetBackendRequest, out *GetBackendResponse) error
	}
	type Backend struct {
		backend
	}
	h := &backendHandler{hdlr}
	return s.Handle(s.NewHandler(&Backend{h}, opts...))
}

type backendHandler struct {
	BackendHandler
}

func (h *backendHandler) GetBackend(ctx context.Context, in *GetBackendRequest, out *GetBackendResponse) error {
	return h.BackendHandler.GetBackend(ctx, in, out)
}
