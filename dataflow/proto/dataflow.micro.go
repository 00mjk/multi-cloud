// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dataflow.proto

/*
Package dataflow is a generated protocol buffer package.

It is generated from these files:
	dataflow.proto

It has these top-level messages:
	Schedule
	Policy
	GetPolicyRequest
	GetPolicyResponse
	CreatePolicyRequest
	CreatePolicyResponse
*/
package dataflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DataFlow service

type DataFlowService interface {
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...client.CallOption) (*GetPolicyResponse, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error)
}

type dataFlowService struct {
	c    client.Client
	name string
}

func NewDataFlowService(name string, c client.Client) DataFlowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dataflow"
	}
	return &dataFlowService{
		c:    c,
		name: name,
	}
}

func (c *dataFlowService) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...client.CallOption) (*GetPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.GetPolicy", in)
	out := new(GetPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.CreatePolicy", in)
	out := new(CreatePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataFlow service

type DataFlowHandler interface {
	GetPolicy(context.Context, *GetPolicyRequest, *GetPolicyResponse) error
	CreatePolicy(context.Context, *CreatePolicyRequest, *CreatePolicyResponse) error
}

func RegisterDataFlowHandler(s server.Server, hdlr DataFlowHandler, opts ...server.HandlerOption) error {
	type dataFlow interface {
		GetPolicy(ctx context.Context, in *GetPolicyRequest, out *GetPolicyResponse) error
		CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error
	}
	type DataFlow struct {
		dataFlow
	}
	h := &dataFlowHandler{hdlr}
	return s.Handle(s.NewHandler(&DataFlow{h}, opts...))
}

type dataFlowHandler struct {
	DataFlowHandler
}

func (h *dataFlowHandler) GetPolicy(ctx context.Context, in *GetPolicyRequest, out *GetPolicyResponse) error {
	return h.DataFlowHandler.GetPolicy(ctx, in, out)
}

func (h *dataFlowHandler) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error {
	return h.DataFlowHandler.CreatePolicy(ctx, in, out)
}
